name: CI Deploy (Prod)

on:
  push:
    branches: 
      - prod

jobs:
  prepare:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: mydb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://postgres:password@localhost:5432/mydb

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Apply database schema
        run: psql "$DATABASE_URL" -f schema.sql

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features postgres

      - name: Prepare SQLx
        run: cargo sqlx prepare

      - name: Cache SQLx query data
        uses: actions/cache@v3
        with:
          path: .sqlx
          key: sqlx-${{ github.sha }}

  build:
    runs-on: ubuntu-latest
    needs: prepare

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Restore SQLx query cache
        uses: actions/cache@v3
        with:
          path: .sqlx
          key: sqlx-${{ github.sha }}

      - name: Build project
        run: cargo build --release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: enviame
          path: target/release/enviame

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: enviame
          path: .

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Upload binary
        run: |
          scp enviame ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/enviame_prod/enviame

      - name: Restart services
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            sudo systemctl restart enviame_prod
          EOF
